#!/usr/bin/env python3
"""
Created on 10:21 14-10-2022 

@author: XY Ding
mail to: dxy_vasp@163.com
python3: QSKIT.py
"""
import os,sys
# sys.dont_write_bytecode = True     

Q_SKIT = r"""
  ██████      ███████  ██   ██  ██  ████████     ███      ████
██      ██    ██       ██ ██           ██       ████    ██    ██
██   ██ ██    ███████  ███████  ██     ██         ██    ██    ██
██      ██         ██  ██ ██    ██     ██         ██    ██    ██
  ██████  ██  ███████  ██   ██  ██     ██         ██ ██   ████ 

 Developer: Xianyong Ding et al.     Tutorials: https://QSKIT.com """

def welcome_main():
    print(Q_SKIT)
    print("*****************************************************************")
    print(" T) Input template file                                          ")
    print("*****************************************************************")
    print("                     QUANTUM ESPRESSO                            ")
    print("========================= Input =================================")
    print(" 01) QE Input file Generator       02) Structure Editor          ")
    print(" 03) KPATH Generator               04) Get optimized structure   ")
    print(" 05) homogeneous kpt               06) Irreducible k/qpt         ")
    print("======================= Visualize ===============================")
    print(" 11) Band structure                12) Density of states         ")
    print(" 13) Phonon bands                  14) Phonon density            ")
    print("======================= Calculator ==============================")
    print(" 21) Band (scf-bans)               22) Dos  (scf-nscf-dos)       ")
    print(" 23) Nscf (scf-nscf)               24) Nscf (homogeneous kpt)    ")
    print(" 25) Phonon (DFPT)                 26) Phonon (FDM)              ")
    print(" 27) Phonon (Perturbo)             28) etc.                      ")
    print("*****************************************************************")
    print("                       Other Modules                             ")
    print("=================================================================")
    print(" M1) Wannier90                     M2) Phonopy                   ")
    print(" M3) EPW                           M4) Perturbo                  ")
    print(" M5) TDEP                          M6) ALAMODE                   ")
    print(" M7) SSCHA                         M8) ShengBTE                  ")
    print(" M9) Boltzmann Transport                                         ")
    print("*****************************************************************")
    print("======================== Utilities ==============================")
    print(" 51) Force constants               52) Fermi surface             ")
    print("*****************************************************************")
    print(" 0) quit                                                         ")
    print("------------------->>")
    select = input("Input : ")
    return select

def templatefiles():
    print("======================= Template files ============================")
    print("       T1) input template file                                     ")
    print("------------------->>")
    select = input("Input : ")
    return select

def checkfile_inputQE():
    from shutil import copyfile
    sys.dont_write_bytecode = True
    if not osp.exists(osp.join(os.getcwd(), "AutoinputQE.py")):
        copyfile(osp.join(osp.join(curPath, "configfile"), "Auto_inpp.py"), osp.join(os.getcwd(), "AutoinputQE.py"))
def checkfile_AutoinputQE(filename):
    from shutil import copyfile
    sys.dont_write_bytecode = True
    if not osp.exists(osp.join(os.getcwd(), "AutoinputQE.py")):
        copyfile(osp.join(osp.join(curPath, "configfile"), filename), osp.join(os.getcwd(), "AutoinputQE.py"))
def checkfile_relaxtype():
    import module.structure as struct
    sys.dont_write_bytecode = True
    if osp.exists(osp.join(os.getcwd(), "vc-relax.in")):
        struct.write_contcar(os.getcwd(), 'vc-relax.log')
    elif osp.exists(osp.join(os.getcwd(), "relax.in")):
        struct.write_contcar(os.getcwd(), 'relax.log')
    else:
        print("No output file: vc-relax.log or relax.log !")

def checkfile_relaxtype_NoOPT():
    import module.structure as struct
    sys.dont_write_bytecode = True
    if osp.exists(osp.join(os.getcwd(), "vc-relax.in")):
        struct.write_contcar(os.getcwd(), 'vc-relax.log')
    elif osp.exists(osp.join(os.getcwd(), "relax.in")):
        struct.write_contcar(os.getcwd(), 'relax.log')
    else:
        print("No output file: vc-relax.log or relax.log !")

def manipulate():
    select = welcome_main()
    if select == '1':
        checkfile_inputQE()
        os.system('chmod +x AutoinputQE.py')
    elif select == '2':
        checkfile_inputQE()
        from module.mod import moduleslib
        moduleslib(os.getcwd()).config_single()
        sys.dont_write_bytecode = True
    elif select == '3':
        print("Begin processing !")
        checkfile_relaxtype()
        print("End processing !")
    elif select == '4':
        from module.structure import get_stru_from_QE_input
        fname = input("Please input filename: ")
        get_stru_from_QE_input(os.getcwd(), fname)
    elif select == '5':
        print("Begin processing !")
        checkfile_relaxtype_NoOPT()
        print("End processing !")
    elif select == 'D':
        import scripts.post as postp
        postp.manipulate()
        sys.dont_write_bytecode = True
    elif select == 'M1':                           ################ Auto
        checkfile_inputQE()
        import configfile.w90_input as w90
        w90.manipulate()
    elif select == 'M2':                           ################ Auto
        checkfile_inputQE()
        import configfile.epw_input as epw
        epw.manipulate()
    elif select == 'M3':                           ################ Auto
        checkfile_inputQE()
        import configfile.shengbte_input as shengbte
        shengbte.manipulate()
    elif select == 'M4':                           ################ Auto
        checkfile_inputQE()
        import configfile.perturbo_input as perturbo
        perturbo.manipulate()
    elif select == 'A':                           ################ Auto
        checkfile_inputQE()
        import configfile.Auto as aut
        aut.manipulate()
    else:
        import configfile.Auto as ap
        # sel = ap.autocal()
        ap.manipulate_direct(select)
        # print("Please input right parameters !")
            
if __name__ == '__main__':
    # try:
    #     import configfile.config as configg
    #     configg.conf_intel()
    #     print("Intel environment config Success !")
    # except:
    #     print("Warning: Intel environment config failure !")
    manipulate()
